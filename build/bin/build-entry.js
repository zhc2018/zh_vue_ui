/*
 * @Author: zhc
 * @Date: 2020-09-16 10:31:29
 * @LastEditTime: 2021-01-28 15:18:16
 * @LastEditors: Please set LastEditors
 * @Description: 创建src 下的index.js文件 生成入口文件
 * @FilePath: /ui注释/build/bin/build-enter.js
 */

const path = require('path');
const fs = require('fs');
const components = require('../../components.json'); // 引入事先生成的json 文件
const endOfLine = require('os').EOL; // 操作系统的行末标志
const uppercamelcase = require('uppercamelcase'); // 用来将文件名字格式化
const render = require('json-templater/string'); // 一个模版生成器

const OUTPUT = path.resolve(process.cwd(), './src/index.js'); // 定义出口位置
const IMPORT_TEMPLATE = `import {{name}} from '../packages/{{package}}/index.js';`; // 定义导入字段，其中{{name}} 为模版变量
const INSTALL_TEMPLATE = '  {{name}}';
const MAIN_TEMPLATE = `/* Automatically generated by './build/bin/build-entry.js' */

{{import}}

const components = [
{{install}}
];

const install = function(Vue) {
  components.forEach(item => {
    Vue.component(item.name, item);
  });

  Vue.prototype.$message = Message;
  Vue.prototype.$notify = Notification;
};

if(typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
};

export default {
  version: '{{version}}',
  install,
{{install}}
};

`; // 输出的模版内容

const componentName = Object.keys(components); // 获取json文件的所有名字

const importTemplate = [];
const installTemplate = [];
const version = require('../../package.json').version; // package中的version

componentName.forEach(name => {
  var formatName = uppercamelcase(name); // 驼峰名称处理

  importTemplate.push(render(IMPORT_TEMPLATE, {
    name:formatName,
    package: name
  })); // 将定义导入字段循环生成，并且推入数组

  installTemplate.push(render(INSTALL_TEMPLATE, {
    name: formatName
  }));

});

const writeTemplate = render(MAIN_TEMPLATE, { // 为输出模版内容，并且添加系统行末标志用以换行操作
  import: importTemplate.join(endOfLine),
  install: installTemplate.join(','+endOfLine),
  version: version
});

fs.writeFile(OUTPUT,writeTemplate,'utf8',(err) => { // 写入相关文件内
  err && console.log(err);
  console.log('build entry done');
});
